{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport React from \"react\";\nimport { Button as ButtonBase } from \"react-native-paper\";\nimport { color, t } from \"react-native-tailwindcss\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar Button = function Button(_ref) {\n  var style = _ref.style,\n      _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? \"contained\" : _ref$mode,\n      onPress = _ref.onPress,\n      disabled = _ref.disabled,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? \"lg\" : _ref$size,\n      _icon = _ref.icon,\n      children = _ref.children,\n      loading = _ref.loading,\n      labelStyle = _ref.labelStyle;\n  var defaultStyle = [t.roundedLg];\n  var defaultLabelStyle = [];\n\n  switch (mode) {\n    case \"outlined\":\n      defaultStyle = [].concat(_toConsumableArray(defaultStyle), [t.borderPrimary, t.bgWhite]);\n      defaultLabelStyle = [t.textBlack];\n      break;\n\n    case \"contained\":\n      defaultStyle = _toConsumableArray(defaultStyle);\n      defaultLabelStyle = [t.textWhite];\n      break;\n\n    case \"text\":\n      defaultStyle = [].concat(_toConsumableArray(defaultStyle), [t.bgNeutralsGrey]);\n      defaultLabelStyle = [t.textBlack];\n      break;\n\n    default:\n      break;\n  }\n\n  return _jsx(ButtonBase, {\n    uppercase: false,\n    mode: mode,\n    style: [].concat(_toConsumableArray(defaultStyle), [style]),\n    labelStyle: [t.fontSemibold].concat(_toConsumableArray(defaultLabelStyle), [labelStyle]),\n    onPress: onPress,\n    color: color.primary,\n    icon: function icon(_ref2) {\n      var _icon$image;\n\n      var size = _ref2.size,\n          color = _ref2.color,\n          direction = _ref2.direction;\n      return (_icon$image = _icon == null ? void 0 : _icon.image) != null ? _icon$image : null;\n    },\n    contentStyle: [size === \"lg\" ? t.h12 : t.h8],\n    disabled: disabled,\n    children: children,\n    loading: loading\n  });\n};\n\nexport default Button;","map":{"version":3,"sources":["/Users/jianlongnie/workspace/archus-components-mobile/src/components/Button/Button.tsx"],"names":["React","Button","ButtonBase","color","t","style","mode","onPress","disabled","size","icon","children","loading","labelStyle","defaultStyle","roundedLg","defaultLabelStyle","borderPrimary","bgWhite","textBlack","textWhite","bgNeutralsGrey","fontSemibold","primary","direction","image","h12","h8"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,MAAM,IAAIC,UAAnB,QAAiD,oBAAjD;AACA,SAASC,KAAT,EAAgBC,CAAhB,QAAyB,0BAAzB;;;AAiBA,IAAMH,MAA6B,GAAG,SAAhCA,MAAgC,OAUhC;AAAA,MATJI,KASI,QATJA,KASI;AAAA,uBARJC,IAQI;AAAA,MARJA,IAQI,0BARG,WAQH;AAAA,MAPJC,OAOI,QAPJA,OAOI;AAAA,MANJC,QAMI,QANJA,QAMI;AAAA,uBALJC,IAKI;AAAA,MALJA,IAKI,0BALG,IAKH;AAAA,MAJJC,KAII,QAJJA,IAII;AAAA,MAHJC,QAGI,QAHJA,QAGI;AAAA,MAFJC,OAEI,QAFJA,OAEI;AAAA,MADJC,UACI,QADJA,UACI;AACJ,MAAIC,YAAoC,GAAG,CAACV,CAAC,CAACW,SAAH,CAA3C;AACA,MAAIC,iBAAyC,GAAG,EAAhD;;AACA,UAAQV,IAAR;AACE,SAAK,UAAL;AACEQ,MAAAA,YAAY,gCAAOA,YAAP,IAAqBV,CAAC,CAACa,aAAvB,EAAsCb,CAAC,CAACc,OAAxC,EAAZ;AACAF,MAAAA,iBAAiB,GAAG,CAACZ,CAAC,CAACe,SAAH,CAApB;AACA;;AACF,SAAK,WAAL;AACEL,MAAAA,YAAY,sBAAOA,YAAP,CAAZ;AACAE,MAAAA,iBAAiB,GAAG,CAACZ,CAAC,CAACgB,SAAH,CAApB;AACA;;AACF,SAAK,MAAL;AACEN,MAAAA,YAAY,gCAAOA,YAAP,IAAqBV,CAAC,CAACiB,cAAvB,EAAZ;AACAL,MAAAA,iBAAiB,GAAG,CAACZ,CAAC,CAACe,SAAH,CAApB;AACA;;AACF;AACE;AAdJ;;AAiBA,SACE,KAAC,UAAD;AACE,IAAA,SAAS,EAAE,KADb;AAEE,IAAA,IAAI,EAAEb,IAFR;AAGE,IAAA,KAAK,+BAAMQ,YAAN,IAAoBT,KAApB,EAHP;AAIE,IAAA,UAAU,GAAGD,CAAC,CAACkB,YAAL,4BAAsBN,iBAAtB,IAAyCH,UAAzC,EAJZ;AAKE,IAAA,OAAO,EAAEN,OALX;AAME,IAAA,KAAK,EAAEJ,KAAK,CAACoB,OANf;AAOE,IAAA,IAAI,EAAE;AAAA;;AAAA,UAAGd,IAAH,SAAGA,IAAH;AAAA,UAASN,KAAT,SAASA,KAAT;AAAA,UAAgBqB,SAAhB,SAAgBA,SAAhB;AAAA,4BAAgCd,KAAhC,oBAAgCA,KAAI,CAAEe,KAAtC,0BAA+C,IAA/C;AAAA,KAPR;AAQE,IAAA,YAAY,EAAE,CAAChB,IAAI,KAAK,IAAT,GAAgBL,CAAC,CAACsB,GAAlB,GAAwBtB,CAAC,CAACuB,EAA3B,CARhB;AAUE,IAAA,QAAQ,EAAEnB,QAVZ;AAWE,IAAA,QAAQ,EAAEG,QAXZ;AAYE,IAAA,OAAO,EAAEC;AAZX,IADF;AAgBD,CA9CD;;AA+CA,eAAeX,MAAf","sourcesContent":["import { AntDesign } from \"@expo/vector-icons\";\nimport React from \"react\";\nimport { Image, StyleProp, TextStyle, ViewStyle } from \"react-native\";\nimport { Button as ButtonBase, IconButton } from \"react-native-paper\";\nimport { color, t } from \"react-native-tailwindcss\";\n\ninterface ButtonProps {\n  style?: StyleProp<ViewStyle>;\n  mode?: \"text\" | \"outlined\" | \"contained\" | undefined;\n  onPress?: () => void;\n  labelStyle?: StyleProp<TextStyle>;\n  disabled?: boolean;\n  icon?: {\n    image: React.ReactNode;\n    direction?: \"rtl\" | \"ltr\" | \"auto\";\n    size?: \"lg\" | \"md\";\n  };\n  size?: \"lg\" | \"md\";\n  loading?: boolean;\n}\n\nconst Button: React.FC<ButtonProps> = ({\n  style,\n  mode = \"contained\",\n  onPress,\n  disabled,\n  size = \"lg\",\n  icon,\n  children,\n  loading,\n  labelStyle,\n}) => {\n  let defaultStyle: StyleProp<ViewStyle>[] = [t.roundedLg];\n  let defaultLabelStyle: StyleProp<ViewStyle>[] = [];\n  switch (mode) {\n    case \"outlined\":\n      defaultStyle = [...defaultStyle, t.borderPrimary, t.bgWhite];\n      defaultLabelStyle = [t.textBlack];\n      break;\n    case \"contained\":\n      defaultStyle = [...defaultStyle];\n      defaultLabelStyle = [t.textWhite];\n      break;\n    case \"text\":\n      defaultStyle = [...defaultStyle, t.bgNeutralsGrey];\n      defaultLabelStyle = [t.textBlack];\n      break;\n    default:\n      break;\n  }\n\n  return (\n    <ButtonBase\n      uppercase={false}\n      mode={mode}\n      style={[...defaultStyle, style]}\n      labelStyle={[t.fontSemibold, ...defaultLabelStyle, labelStyle]}\n      onPress={onPress}\n      color={color.primary}\n      icon={({ size, color, direction }) => icon?.image ?? null}\n      contentStyle={[size === \"lg\" ? t.h12 : t.h8]}\n      // contentStyle={{flexDirection: 'row-reverse'}}\n      disabled={disabled}\n      children={children}\n      loading={loading}\n    />\n  );\n};\nexport default Button;\n"]},"metadata":{},"sourceType":"module"}